<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ErrMsg:Nacos Server did not start because dumpservice bean construction failure :No DataSource set</title>
    <url>/2024/03/19/ErrMsg-Nacos-Server-did-not-start-because-dumpservice-bean-construction-failure-No-DataSource-set/</url>
    <content><![CDATA[<p><a href="https://so.csdn.net/so/search?q=Nacos&spm=1001.2101.3001.7020">Nacos</a>有时候虽然可以正常启动，但是一访问<a href="http://192.168.6.100:8848/">http://127.0.0.1:8848/</a>进程就会stopped。<a href="https://so.csdn.net/so/search?q=%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97&spm=1001.2101.3001.7020">查看日志</a>有这么一句报错：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ErrMsg:Nacos Server did not start because dumpservice bean construction failure :No DataSource set</span><br></pre></td></tr></table></figure>

<p>这有可能是数据库的连接没有释放导致的，可以尝试在数据库中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush hosts</span><br></pre></td></tr></table></figure>

<p>再尝试连接</p>
<p>然后可以查询下远程权限是否开放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select host,user from user</span><br></pre></td></tr></table></figure>

<p>如果没有开放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;</span><br></pre></td></tr></table></figure>

<p>开放远程权限再尝试启动Nacos，这时再访问Nacos问题得以解决。<br>————————————————</p>
<pre><code>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/FENGBOKE/article/details/136579894">https://blog.csdn.net/FENGBOKE/article/details/136579894</a></p>
]]></content>
      <tags>
        <tag>Nacos</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Loombook命名的坑</title>
    <url>/2023/10/01/Loombook%E5%91%BD%E5%90%8D%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>在写一个后台用户模块时，为了区分系统管理员和用户，命名时用使用了sUsername来命名系统管理员的名字，但是数据库注册管理员时一直没法注册成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;系统管理员&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;管理员姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sUsername;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;管理员手机号码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经查源码发现sUsername的set方法在loombook中被命名为setSUsername，也就是说loombook中所有的属性的前两个字母必须小写！</p>
]]></content>
      <tags>
        <tag>Loombook</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo教程(一)|如何写文章并发布</title>
    <url>/2024/03/18/Hexo%E6%95%99%E7%A8%8B-%E4%B8%80-%E5%A6%82%E4%BD%95%E5%86%99%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a><strong>创建新文章</strong></h3><p>在根目录下打开命令行，使用如下命令创建新文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="/images/HexoBlog_3_18.png"></p>
<p>md文档顶部自动生成的内容称之为<code>Front-matter</code>，即前置信息，用于给 Hexo 渲染该 md 文档，有很多的配置项可以自己添加：</p>
<p><img src="/images/HexoBlog_2024-03-18_21-13-56.png"></p>
<p>如何添加配置项:</p>
<p><img src="/images/HexoBlog_2024-03-18_21-17-17.png"></p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>本地运行命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>部署命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Nacos异常：No DataSource set和Client not connected, current status:STARTING</title>
    <url>/2024/03/19/Nacos%E5%BC%82%E5%B8%B8%EF%BC%9ANo-DataSource-set%E5%92%8CClient-not-connected-current-status-STARTING/</url>
    <content><![CDATA[<p>今天遇到一个很有意思的问题：Nacos工作的好好的，一运行程序，nacos就自动stopped了。</p>
<p>首先日志排查，linux命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs nacos</span><br></pre></td></tr></table></figure>

<p>初步怀疑是nacos启动后资源不足，但是日志里没有OutOfMemoryError等错误，但是日志里有这么一句：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2024-03-08 22:07:25,713 ERROR Application run failed</span><br><span class="line"></span><br><span class="line">Nacos Server did not start because dumpservice bean construction failure : No DataSource set</span><br></pre></td></tr></table></figure>

<p>百度了一下发现是mysql配置文件出了问题，mysql8.0之后的版本, 需要在官网文档配置mysql的基础上加上<strong>mysql时区的设置。</strong></p>
<p><strong>像这样：</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/db_spzx?characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure>

<p>运行程序后报了新的错误：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: com.alibaba.nacos.api.exception.NacosException: Client not connected, current status:STARTING</span><br></pre></td></tr></table></figure>

<p>依旧是百度了一下，发现nocos不仅需要配置中心地址，还得配置服务注册中心的地址。像这样：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">simonf</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure>

<p>加入了服务注册中心的地址重启项目，运行成功！</p>
<pre><code>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/FENGBOKE/article/details/136573527">https://blog.csdn.net/FENGBOKE/article/details/136573527</a></p>
]]></content>
      <tags>
        <tag>Nacos</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>排他锁理解，MySQL实践</title>
    <url>/2024/03/29/%E6%8E%92%E4%BB%96%E9%94%81%E7%90%86%E8%A7%A3%EF%BC%8CMySQL%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>先上定义：</p>
<p>排他锁又称为写锁，简称X锁，顾名思义，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</p>
<p>在此先引入MySQL中锁的分类：    </p>
<p><img src="/images/HexoBlog_2024-03-29_11-16-17.png">  </p>
<p>其中，独占锁是写锁，可理解为传统意义上的读写锁，读读不互斥，读写互斥，写写互斥。</p>
<p>排他锁用法：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ... FROM UPDATE;</span><br></pre></td></tr></table></figure>

<p>排他锁的申请前提：没有线程对该结果集中的任何行数据使用排他锁或共享锁，否则申请会阻塞。  </p>
<p>for update仅适用于InnoDB，且必须在事务块(BEGIN&#x2F;COMMIT)中才能生效。在进行事务操作时，通过“for update”语句，MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。排他锁包含行锁、表锁。    </p>
<p>验证排他锁，设计一张表：<br><img src="/images/HexoBlog_2024-03-29_11-19-17.png">            																														                 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 开启事务1 */</span><br><span class="line">BEGIN;</span><br><span class="line">/* 查询name为张三的数据并加上排他锁 */</span><br><span class="line">SELECT * FROM test WHERE name = &#x27;张三&#x27; FOR UPDATE;</span><br><span class="line">/* 延迟10秒执行 */</span><br><span class="line">SELECT SLEEP(10);</span><br><span class="line">/* 尝试修改  name = &#x27;张三&#x27; 的数据 */</span><br><span class="line">UPDATE test SET balance = 5000 WHERE name = &#x27;张三&#x27;;</span><br><span class="line">/* 延迟15秒执行 */</span><br><span class="line">SELECT SLEEP(15);</span><br><span class="line">/* 提交事务1 */</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>开启事务1的执行过程如下：  </p>
<p><img src="/images/HexoBlog_2024-03-29_11-27-17.png">  </p>
<p>同时开启事务二：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 开启事务2 */</span><br><span class="line">BEGIN;</span><br><span class="line">/* 普通查询name = &#x27;张三&#x27;的数据 */</span><br><span class="line">SELECT * FROM test WHERE name = &#x27;张三&#x27;;</span><br><span class="line">/* 提交事务2 */</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>事务二很快执行完成了，执行结果如下：</p>
<p><img src="/images/HexoBlog_2024-03-29_11-33-17.png">    </p>
<p>可以看出在事务一开启了排他锁以后，其他事务(事务二)仍然可以进行读操作，并产生了不可重复读的结果（在事务一没提交之前，事务一修改张三的余额为5000，事务二读取的张三的余额却为7000，待事务一执行完毕后，事务二读取的张三的余额变为5000）。  </p>
<p>如果事务一不变的情况下    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 开启事务1 */</span><br><span class="line">BEGIN;</span><br><span class="line">/* 查询name为张三的数据并加上排他锁 */</span><br><span class="line">SELECT * FROM test WHERE name = &#x27;张三&#x27; FOR UPDATE;</span><br><span class="line">/* 延迟10秒执行 */</span><br><span class="line">SELECT SLEEP(10);</span><br><span class="line">/* 尝试修改  name = &#x27;张三&#x27; 的数据 */</span><br><span class="line">UPDATE test SET balance = 5000 WHERE name = &#x27;张三&#x27;;</span><br><span class="line">/* 延迟15秒执行 */</span><br><span class="line">SELECT SLEEP(15);</span><br><span class="line">/* 提交事务1 */</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>事务二对张三的余额进行修改操作  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 开启事务2 */</span><br><span class="line">BEGIN;</span><br><span class="line">/* 尝试修改  name = &#x27;张三&#x27; 的数据 */</span><br><span class="line">UPDATE test SET balance = 2000 WHERE name = &#x27;张三&#x27;;</span><br><span class="line">/* 提交事务2 */</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p><img src="/images/HexoBlog_2024-03-29_11-48-17.png">    </p>
<p>可以看到在事务一开启排他锁的期间，事务二无法进行修改操作，等待20多秒事务一提交后才执行了事务二。事务二在事务一后执行，所以张三的余额被修改为2000。  </p>
<p><img src="/images/HexoBlog_2024-03-29_11-50-17.png"><br>————————————————</p>
<pre><code>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/FENGBOKE/article/details/136166260">https://blog.csdn.net/FENGBOKE/article/details/136166260</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>MySQL锁</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举和包装类案例分析</title>
    <url>/2022/04/01/%E6%9E%9A%E4%B8%BE%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="枚举和包装类"><a href="#枚举和包装类" class="headerlink" title="枚举和包装类"></a>枚举和包装类</h2><h3 id="阅读代码，分析运行结果："><a href="#阅读代码，分析运行结果：" class="headerlink" title="阅读代码，分析运行结果："></a>阅读代码，分析运行结果：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">	<span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">	System.out.println(i1 == i2);</span><br><span class="line">	System.out.println(i3 == i4);</span><br><span class="line">	System.out.println(i1 == i3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码涉及到了Java中的自动装箱和拆箱的概念。</p>
<p>首先，我们需要了解Java中的整数缓存机制。Java中对于整数类型的缓存范围是在-128到127之间。当我们使用自动装箱将一个整数赋值给一个 <code>Integer</code> 对象时，如果该整数在缓存范围内，那么会直接返回缓存中的对象，而不会创建新的对象。</p>
<p>现在来分析代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(i1 == i2);</span><br><span class="line">System.out.println(i3 == i4);</span><br><span class="line">System.out.println(i1 == i3);</span><br></pre></td></tr></table></figure>

<p>在这段代码中，我们分别创建了两个 <code>Integer</code> 对象 <code>i1</code> 和 <code>i2</code>，并将它们都赋值为 <code>128</code>。然后，我们创建了两个 <code>int</code> 类型的变量 <code>i3</code> 和 <code>i4</code>，并同样赋值为 <code>128</code>。</p>
<p>接下来，我们分别使用 <code>==</code> 运算符进行比较。</p>
<p>第一个比较 <code>i1 == i2</code>，由于 <code>i1</code> 和 <code>i2</code> 都是通过自动装箱得到的 <code>Integer</code> 对象，而且 <code>128</code> 不在整数缓存范围内，所以 <code>i1</code> 和 <code>i2</code> 引用的是不同的对象，因此比较结果为 <code>false</code>。</p>
<p>第二个比较 <code>i3 == i4</code>，由于 <code>i3</code> 和 <code>i4</code> 都是基本类型的 <code>int</code>，直接进行数值比较，所以比较结果为 <code>true</code>。</p>
<p>第三个比较 <code>i1 == i3</code>，由于 <code>i1</code> 是 <code>Integer</code> 对象，而 <code>i3</code> 是基本类型的 <code>int</code>，在比较时会进行自动拆箱，将 <code>i1</code> 转换为 <code>int</code> 类型。然后进行数值比较，所以比较结果为 <code>true</code>。</p>
<p>总结起来，<code>i1 == i2</code> 的结果是 <code>false</code>，<code>i3 == i4</code> 和 <code>i1 == i3</code> 的结果都是 <code>true</code>。这是因为 <code>Integer</code> 对象的比较是通过自动拆箱后的数值比较来实现的。</p>
<h3 id="阅读代码，分析运行结果：-1"><a href="#阅读代码，分析运行结果：-1" class="headerlink" title="阅读代码，分析运行结果："></a>阅读代码，分析运行结果：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">	<span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">	<span class="type">Double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">	<span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">	System.out.println(a == b);</span><br><span class="line">	System.out.println(c == d);</span><br><span class="line">	System.out.println(a == d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码涉及到了Java中的自动装箱和拆箱的概念，和包装类的缓存机制。Double和Float包装类没有缓存对象。所以(a&#x3D;&#x3D;b)结果为true，(c&#x3D;&#x3D;d)结果为false，(a&#x3D;&#x3D;d)结果为true。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
        <tag>枚举和包装类</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet学习时遇到的问题</title>
    <url>/2020/10/01/Servlet%E5%AD%A6%E4%B9%A0%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="由于文件没有被设置成Resoureces-Root导致的空指针异常"><a href="#由于文件没有被设置成Resoureces-Root导致的空指针异常" class="headerlink" title="由于文件没有被设置成Resoureces Root导致的空指针异常"></a>由于文件没有被设置成Resoureces Root导致的空指针异常</h2><p>在前端输入信息后，点击提交按钮，控制台报错:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">java.lang.NullPointerException: inStream parameter is null</span><br></pre></td></tr></table></figure>

<p>检查后发现输入流没有读取到properties文件，将类加载器改为当前类的加载器(当前类为JDBCTools.class)，将properties文件移入到resources文件夹目录下（一定记得将resources文件夹右键Mark Directory as Resources Root），该问题解决。以下是Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pro.load((JDBCTools.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>)));</span><br></pre></td></tr></table></figure>

<h2 id="泛型使用"><a href="#泛型使用" class="headerlink" title="泛型使用"></a>泛型使用</h2><p>从前端获取的数据用UserDao工具类的getBean语句在数据库内查询，但是返回值是Object类。</p>
<p>通过在BaseBao后面加泛型可以获取查询到对象是User对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;User&gt;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.getBean(User.class,<span class="string">&quot;select password from userreg where id = ?&quot;</span> ,id);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Servlet</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器将路径自动转换为小写导致跳过路由守卫</title>
    <url>/2021/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B0%86%E8%B7%AF%E5%BE%84%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B0%8F%E5%86%99%E5%AF%BC%E8%87%B4%E8%B7%B3%E8%BF%87%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/</url>
    <content><![CDATA[<p>路由设置路径中出现大写，浏览器将路径自动转换为小写导致跳过路由守卫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">     <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/ShowSchedule&#x27;</span>,<span class="attr">component</span>:<span class="title class_">ShowSchedule</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/Login&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Login</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>浏览器输入URL：<a href="view-source:http://localhost:5174/#/showschedule">view-source:localhost:5174&#x2F;#&#x2F;showschedule</a>路径自动全部转换为小写导致跳过了路由守卫，建议以后Path全小写，component首字母大写。</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
